Bootloader introduction
-----------------------

The bootloader is intended to be programmed into the RP2040 when
the board is manufactured. The bootloader can download a binary image
over the RP2040's default serial port pins using a simple set of commands.

Building the bootloader
-----------------------

First build the ECC and SHA2 libraries, both Arm and native versions:

  cd ../micro-ecc
  arm-none-eabi-gcc -mcpu=cortex-m0 -DuECC_PLATFORM=0 -c uECC.c -o uECC.o
  gcc -DuECC_PLATFORM=0 -c uECC.c -o uECC.native.o
  cd ../sha2
  arm-none-eabi-gcc -mcpu=cortex-m0 -c sha2.c -o sha2.o
  gcc -c sha2.c -o sha2.native.o
  cd ../bhbl-pico

Then in the bhbl-pico directory run

  make
  ./mkkeys

This will create a private key in key.private.bin and a corresponding
public key in key.public.bin; the public key also appears in C format in
key.public.h .

Now

  rm -r build
  mkdir -p build
  cmake ..
  make

This will create files build/main.* (for example build/main.elf)
that can be programmed into the RP2040 using openocd or similar
tool or, in principle, over USB. These have the public key built
into them.

Creating an image the bootloader can use
----------------------------------------

In the firmware-pico directory execute the same sequence as above

  rm -r build
  mkdir -p build
  cmake ..
  make

This will again create files build/main.* (for example build/main.bin)
that are suitable for uploading to the board using the bootloader.
Note that this binary is intended to run from the RP2040's RAM, and
so is not suitable for programming into its flash.

Signing the image
-----------------

In the bhbl-pico directory run

  make
  ./sign ../firmware-pico/build/main.bin

This creates a file signature.bin .

Uploading the image
-------------------

In the bhbl-pico directory run

  make
  ./upload /dev/ttyUSB0 ../firmware-pico/build/main.bin signature.bin

with the last line suitably modified to reflect the serial device in
use on the host. The above has been tested on an ordinary Linux PC with
a USB serial adapter.

A simple checksum is used to verify the integrity of the uploaded
image. The signature is also verified against the public key built
into the bootloader. Note, however, that the image is not encrypted.
